from telebot import types
import db_admin
import admin_kb
import db_log
from admin_kb import admin_kb_menu, admin_kb_log, admin_kb_users, admin_kb, not_superuser, admin_kb_btn_back, \
    admin_kb_delete_cat, admin_kb_select_cat, admin_kb_select_dish, admin_kb_select_cat_to_UPdate, \
    admin_kb_btn_close
from loader import bot


# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@bot.message_handler(commands=['admin'])
def admin_first(message):
    try:
        bot.delete_message(
            chat_id=message.chat.id,
            message_id=message.message_id,
        )
    except:
        pass
    try:
        bot.delete_message(
            chat_id=message.chat.id,
            message_id=message.message_id - 1,
        )
    except:
        pass
    con = db_admin.Connect_menu()
    is_superuser = con.if_superuser(user_id = message.from_user.id)
    if is_superuser[0] == '1' or is_superuser[0] == 1:
        bot.send_message(
            message.chat.id,
            text=f'–î–æ—Å—Ç—É–ø –ø–æ–ª—É—á–µ–Ω!\n –î–æ–±—Ä—ã–π –¥–µ–Ω—å {message.from_user.first_name}',
            reply_markup=admin_kb()
        )
    else:
        bot.send_message(
            message.chat.id,
            text='–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!',
            reply_markup=not_superuser()
        )


@bot.callback_query_handler(lambda call: True if call.data == 'admin_back' else False)
def admin_back_btn(call:types.CallbackQuery):
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.from_user.id,
        text=f'–î–æ—Å—Ç—É–ø –ø–æ–ª—É—á–µ–Ω!\n –î–æ–±—Ä—ã–π –¥–µ–Ω—å {call.from_user.username}',
        reply_markup=admin_kb()
    )


@bot.callback_query_handler(lambda call: True if call.data == 'admin_menu' or
                                                 call.data == 'admin_log' or
                                                 call.data == 'admin_users'
                                                                         else False)
def admin_menu(call:types.CallbackQuery):
    match call.data:
        case 'admin_menu':
            bot.edit_message_text(
                message_id=call.message.message_id,
                chat_id=call.from_user.id,
                text=f"–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä –º–µ–Ω—é",
                reply_markup=admin_kb_menu()
            )

        case 'admin_log':
            bot.edit_message_text(
                message_id=call.message.message_id,
                chat_id=call.from_user.id,
                text=f"–í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –ª—É—á—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                reply_markup=admin_kb_log()
            )
        case 'admin_users':
            bot.edit_message_text(
                message_id=call.message.message_id,
                chat_id=call.from_user.id,
                text=f"–í—ã –≤–æ—à–ª–∏ –≤ –º–µ–Ω—é –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                reply_markup=admin_kb_users()
            )


##–ê–¥–º–∏–Ω-–º–µ–Ω—é.
#Match_case
@bot.callback_query_handler(lambda call: True if call.data == 'new_cat' or
                                                 call.data == 'new_dish' or
                                                 call.data == 'del_dish' or
                                                 call.data == 'del_cat'
                                                                       else False)
def admin_change_menu(call:types.CallbackQuery):
    match call.data:
        case 'new_cat':
            bot.edit_message_text(
                message_id=call.message.message_id,
                chat_id=call.from_user.id,
                text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ 'BACK' ",
                reply_markup=admin_kb_btn_back()
            )
            bot.register_next_step_handler(call.message, new_cat)

        case 'del_cat':
            bot.edit_message_text(
                message_id=call.message.message_id,
                chat_id=call.from_user.id,
                text=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ 'BACK' ",
                reply_markup=admin_kb_delete_cat()
            )

        case 'del_dish':
            bot.edit_message_text(
                message_id=call.message.message_id,
                chat_id=call.from_user.id,
                text=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–ª—é–¥–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ 'BACK' ",
                reply_markup=admin_kb_select_cat()
            )

        case 'new_dish':
            bot.edit_message_text(
                message_id=call.message.message_id,
                chat_id=call.from_user.id,
                text=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –∏ –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ 'BACK' ",
                reply_markup=admin_kb_select_cat_to_UPdate()
            )

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥
def new_cat(message):
    bot.delete_message(
        chat_id=message.chat.id,
        message_id=message.message_id,
    )
    bot.delete_message(
        chat_id=message.chat.id,
        message_id=message.message_id - 1,
    )
    try:
        cat_name = message.text.split(',')[0]
        disc = message.text.split(',')[1]
        con = db_admin.Connect_menu()
        add_cat = con.create_new_cat(cat_name=cat_name, disc=disc)
        bot.send_message(
            chat_id=message.chat.id,
            text=f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:  {cat_name}\n –û–ø–∏—Å–∞–Ω–∏–µ: {disc}',
            reply_markup=admin_kb_btn_back()
        )

    except:
        bot.send_message(
            chat_id=message.chat.id,
            text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!',
            reply_markup=admin_kb_btn_back()
        )

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞. –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞
@bot.callback_query_handler(lambda call: True if call.data.split('*')[0] == 'select_dish_toUP' else False)
def new_dish(call:types.CallbackQuery):
    cat_id = call.data.split('*')[1]
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.from_user.id,
        text=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–æ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–æ–π, –≤–µ—Å–æ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
             f"\n –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ 'BACK' ",
        reply_markup=admin_kb_btn_back()
    )
    bot.register_next_step_handler(call.message, new_dish_info, cat_id)

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞.
def new_dish_info(message, cat_id):
    con = db_admin.Connect_menu()
    con.add_new_dish(dish = message.caption.split(',')[0],
                     price=message.caption.split(',')[1],
                     weight=message.caption.split(',')[2],
                     desc=message.caption.split(',')[3],
                     image_id=message.photo[0].file_id,
                     cat_id=cat_id
    )
    bot.delete_message(
        chat_id=message.chat.id,
        message_id=message.message_id,
    )
    bot.delete_message(
        chat_id=message.chat.id,
        message_id=message.message_id-1,
    )
    bot.send_message(
        chat_id=message.chat.id,
        text=f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –±–ª—é–¥–æ:  {message.caption.split(',')[0]}",
        reply_markup=admin_kb_btn_back()
    )

#–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥.
@bot.callback_query_handler(lambda call: True if call.data.split('*')[0] == 'delete_cat' else False)
def delete_cat(call:types.CallbackQuery):
    con = db_admin.Connect_menu()
    con.delete_cat(cat_id=call.data.split('*')[1])
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.from_user.id,
        text=f"–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        reply_markup=admin_kb_btn_back()
    )

#–£–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞. –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–¥–∞–ª—è–µ–º–æ–≥–æ –±–ª—é–¥–∞.
@bot.callback_query_handler(lambda call: True if call.data.split('*')[0] == 'select_dish' else False)
def select_cat_to_delete(call:types.CallbackQuery):
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.from_user.id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
        reply_markup=admin_kb_select_dish(menu_cat_id=call.data.split('*')[1])
    )

#–£–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞. –í—ã–±–æ—Ä —É–¥–∞–ª—è–µ–º–æ–≥–æ –±–ª—é–¥–∞.
@bot.callback_query_handler(lambda call: True if call.data.split('*')[0] == 'item_menu_delete' else False)
def delete_dish(call:types.CallbackQuery):
    con = db_admin.Connect_menu()
    con.delete_dish(dish_id=call.data.split('*')[1])
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.from_user.id,
        text=f"–ë–ª—é–¥–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ!",
        reply_markup=admin_kb_btn_back()
    )

#–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.callback_query_handler(lambda call: True if call.data == 'users_top' else False)
def users_top(call:types.CallbackQuery):
    con = db_admin.Connect_log()
    top_users = con.get_users_top()
    user_1 = con.get_user_name_byID(user_id=top_users[0][0])
    user_2 = con.get_user_name_byID(user_id=top_users[1][0])
    user_3 = con.get_user_name_byID(user_id=top_users[2][0])
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.from_user.id,
        text=f'ü•á   {user_1[0]}    –ù–∞–∂–∞—Ç–∏–π: {top_users[0][1]}\n'
             f'ü•à   {user_2[0]}    –ù–∞–∂–∞—Ç–∏–π: {top_users[1][1]}\n'
             f'ü•â   {user_3[0]}    –ù–∞–∂–∞—Ç–∏–π: {top_users[2][1]}\n',
        reply_markup=admin_kb_btn_back()
    )

#–¢–æ–ø –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(lambda call: True if call.data == 'buttons_top' else False)
def admin_buttons_top(call:types.CallbackQuery):
    con = db_admin.Connect_log()
    top_buttons = con.get_buttons_top()
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.from_user.id,
        text=f'–¢–æ–ø –Ω–∞–∂–∞—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é: \n'
             f'ü•á   {top_buttons[0][0]}\n                      –ù–∞–∂–∞—Ç–∏–π: {top_buttons[0][1]}\n'
             f'ü•à   {top_buttons[1][0]}\n                      –ù–∞–∂–∞—Ç–∏–π: {top_buttons[1][1]}\n'
             f'ü•â   {top_buttons[2][0]}\n                      –ù–∞–∂–∞—Ç–∏–π: {top_buttons[2][1]}\n'
             f'4   {top_buttons[3][0]}\n                       –ù–∞–∂–∞—Ç–∏–π: {top_buttons[3][1]}\n'
             f'5   {top_buttons[4][0]}\n                       –ù–∞–∂–∞—Ç–∏–π: {top_buttons[4][1]}\n',
        reply_markup=admin_kb_btn_back()
    )

#–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
@bot.callback_query_handler(lambda call: True if call.data == 'give_superuser' else False)
def select_user_to_give_superuser(call:types.CallbackQuery):
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.from_user.id,
        text='–í–≤–µ–¥–∏—Ç–µ USERNAME –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        reply_markup=admin_kb_btn_back()
    )
    bot.register_next_step_handler(call.message, give_superuser)

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
def give_superuser(message):
    bot.delete_message(
        chat_id=message.chat.id,
        message_id=message.message_id,
    )
    bot.delete_message(
        chat_id=message.chat.id,
        message_id=message.message_id - 1,
    )
    try:
        con = db_admin.Connect_superuser()
        con.give_superuser(user_name=message.text)
        bot.send_message(
            chat_id=message.chat.id,
            text=f'–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:  {message.text}',
            reply_markup=admin_kb_btn_back()
        )
    except:
        bot.send_message(
            chat_id=message.chat.id,
            text=f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
            reply_markup=admin_kb_btn_back()
        )

#–ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@bot.callback_query_handler(lambda call: True if call.data == 'delete_superuser' else False)
def select_user_to_give_superuser(call:types.CallbackQuery):
    con = db_admin.Connect_superuser()
    take_all_superuser = con.select_all_superuser()
    all_superuser = types.InlineKeyboardMarkup()
    for title in take_all_superuser:
        all_superuser.add(types.InlineKeyboardButton(title[0], callback_data=f'superuser*{title[0]}'))
    all_superuser.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='admin_back'))
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.from_user.id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤',
        reply_markup=all_superuser
    )
    bot.register_next_step_handler(call.message, give_superuser)

#–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
@bot.callback_query_handler(lambda call: True if call.data.split('*')[0] == 'superuser' else False)
def delete_superuser(call:types.CallbackQuery):
    con = db_admin.Connect_superuser()
    con.del_superuser(user_name=call.data.split('*')[1])
    print(call.data.split('*')[1])
    bot.edit_message_text(
        message_id=call.message.message_id,
        chat_id=call.from_user.id,
        text=f"–í—ã —É–¥–∞–ª–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {call.data.split('*')[1]}",
        reply_markup=admin_kb_btn_back()
    )

#–í—ã–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ –∏–∑ –ë–î
@bot.callback_query_handler(lambda call: True if call.data == 'get_logs' else False)
def get_logs(call:types.CallbackQuery):
    con = db_admin.Connect_log()
    take_logs = con.take_logs()
    logs = ''
    for log in take_logs:
        logs += f'{log}\n'
    log_file = open("Logs", "w", encoding='utf8')
    log_file.write(logs)
    log_file.close()
    bot.send_document(
        chat_id=call.from_user.id,
        document=types.InputFile('Logs'),
        caption=f"–í—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ª–æ–≥–∏:",
        reply_markup=admin_kb_btn_close()
    )

@bot.callback_query_handler(lambda call: True if call.data == 'close' else False)
def close(call:types.CallbackQuery):
    bot.delete_message(
        message_id=call.message.message_id,
        chat_id=call.from_user.id,
    )